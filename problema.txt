API de Gestión de Tareas (To-Do App) - Problema Detallado
Contexto

El objetivo es desarrollar una API REST que permita a los usuarios gestionar sus tareas mediante un sistema que incluya la autenticación y funcionalidades CRUD (Create, Read, Update, Delete). Cada usuario tendrá una cuenta que le permitirá crear, actualizar, eliminar y visualizar sus propias listas de tareas, gestionadas de manera independiente a las de otros usuarios. Además, las tareas podrán categorizarse o etiquetarse, y un sistema de notificaciones informará sobre el progreso o cambios importantes en las tareas.
Requisitos del Sistema:
1. Entidades Principales:

    Usuario: Cada usuario tiene un perfil único y puede gestionar su propia lista de tareas.
        Atributos: ID, nombre de usuario, email, contraseña (hash), rol.
    Lista de Tareas: Los usuarios pueden crear múltiples listas que agrupen varias tareas.
        Atributos: ID, nombre, descripción, fecha de creación, propietario (relación con el usuario).
    Tarea: Cada tarea pertenece a una lista y puede tener un estado de finalización.
        Atributos: ID, nombre, descripción, estado (pendiente/completada), fecha de vencimiento, prioridad, lista a la que pertenece.

2. Autenticación:

    Los usuarios deben autenticarse utilizando JWT (JSON Web Tokens).
    Solo el propietario de una lista o tarea puede gestionarla (seguridad por autenticación y autorización).

3. Endpoints CRUD:

    Usuarios:
        POST /auth/register: Crear una nueva cuenta.
        POST /auth/login: Iniciar sesión y generar un token JWT.
    Listas:
        POST /lists: Crear una lista.
        GET /lists: Obtener todas las listas del usuario autenticado.
        PUT /lists/:id: Actualizar una lista.
        DELETE /lists/:id: Eliminar una lista.
    Tareas:
        POST /tasks: Crear una nueva tarea en una lista.
        GET /tasks: Obtener todas las tareas de una lista específica.
        PUT /tasks/:id: Actualizar una tarea.
        DELETE /tasks/:id: Eliminar una tarea.

4. Categorías y Etiquetas (Desafío adicional):

    Las tareas pueden tener categorías o etiquetas que las clasifiquen.
    Añadir endpoints para gestionar estas etiquetas.
    Posibilidad de buscar tareas por etiqueta.

5. Notificaciones (Desafío adicional):

    Implementar un sistema básico de notificaciones para cuando una tarea esté a punto de vencer o haya cambios en alguna tarea importante.
    Enviar notificaciones por email o a través de websockets en tiempo real.

6. Consideraciones de Seguridad:

    Implementar validación de datos en los endpoints para evitar ataques como inyección de código o desbordamiento de datos.
    Uso de contraseñas hash con bcrypt o argon2.

7. Tecnologías y Herramientas Sugeridas:

    Express: Para crear la API REST.
    MongoDB (o PostgreSQL): Para gestionar las listas y tareas.
    Mongoose (si usas MongoDB) para el modelado de datos.
    JWT para la autenticación.
    Nodemailer para el envío de correos electrónicos si implementas notificaciones.

Estructura del Proyecto:

    /auth: Manejo de autenticación y registro.
    /users: Información del usuario autenticado.
    /lists: CRUD de listas de tareas.
    /tasks: CRUD de tareas dentro de listas específicas.
    /categories: CRUD de categorías o etiquetas.

Próximos pasos:

    Configuración del entorno de desarrollo: Crear un proyecto Express básico.
    Diseñar el modelo de datos: Definir los esquemas de usuarios, listas y tareas.
    Implementar los endpoints CRUD: Comenzar con los usuarios y luego las listas y tareas.
    Agregar autenticación JWT: Asegurar que solo los usuarios autenticados puedan interactuar con sus datos.